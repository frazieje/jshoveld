group 'com.spoohapps.jble6lowpanshoveld'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

mainClassName = "com.spoohapps.jble6lowpanshoveld.ShovelDaemon"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: '2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.27'

    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'

    compile group: 'commons-daemon', name: 'commons-daemon', version: '1.0.15'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    compile files('libs/farcommon-0.1.jar')

    testCompile("junit:junit:4.12")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    testCompile "org.mockito:mockito-core:2.+"

    testRuntime("org.junit.platform:junit-platform-launcher:1.0.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.2")
}

task copyToLib(type: Copy) {
    into "$buildDir/output/libs"
    from configurations.runtime
}

task generateInitScript(type: Copy) {
    doFirst {
        if (!System.env.'JAVA_HOME'?.trim()) {
            throw new GradleException("JAVA_HOME is not set. Please set JAVA_HOME and try again")
        }
    }
    def template_vars = [install_path: "$projectDir",
                         java_home: System.env.'JAVA_HOME'?.trim(),
                         class_path: "$buildDir/output/libs/*"]
    def tag = /<%.*%>/
    from "$projectDir/init.template"
    into "$buildDir/output/init"
    rename { file -> "jble6lowpanshoveld" }
    filter { line ->
        def sb = new StringBuffer()
        def matches = (line =~ /$tag/)
        def i = 0
        while (matches.find()) {
            matches.appendReplacement(sb, template_vars.get(matches[i].substring(2, matches[i].length()-2).trim()))
        }
        matches.appendTail(sb)
        return sb.toString()
    }
}
build.dependsOn(copyToLib)
